// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace PlayerData
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Vec3 : IFlatbufferObject
{
  private Struct __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public void __init(int _i, ByteBuffer _bb) { __p = new Struct(_i, _bb); }
  public Vec3 __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float X { get { return __p.bb.GetFloat(__p.bb_pos + 0); } }
  public float Y { get { return __p.bb.GetFloat(__p.bb_pos + 4); } }
  public float Z { get { return __p.bb.GetFloat(__p.bb_pos + 8); } }

  public static Offset<PlayerData.Vec3> CreateVec3(FlatBufferBuilder builder, float X, float Y, float Z) {
    builder.Prep(4, 12);
    builder.PutFloat(Z);
    builder.PutFloat(Y);
    builder.PutFloat(X);
    return new Offset<PlayerData.Vec3>(builder.Offset);
  }
};

public struct Data : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static Data GetRootAsData(ByteBuffer _bb) { return GetRootAsData(_bb, new Data()); }
  public static Data GetRootAsData(ByteBuffer _bb, Data obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Data __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public PlayerData.Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (PlayerData.Vec3?)(new PlayerData.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<PlayerData.Vec3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static Offset<PlayerData.Data> EndData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<PlayerData.Data>(o);
  }
  public static void FinishDataBuffer(FlatBufferBuilder builder, Offset<PlayerData.Data> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDataBuffer(FlatBufferBuilder builder, Offset<PlayerData.Data> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
